This set of scripts supports building GCC Ada, or GNAT, on macOS as a
cross-compiler for the arm-eabi target. It has been put together from
various hints around the Web, and from painful experience.

The macOS-specific parts are:

* in common.sh, BUILD=x86_64-apple-darwinNN

* in configure-gcc.sh, the --with-stage1-ldflags= switch, used to
  ensure that the executables can be relocated.

The first prerequisite is to have a native Ada compiler, and its
suitably-patched source code, for the GCC release you are building the
cross-compiler for.

Next, you need the following sources (for the ones marked [G], the
GNAT GPL sources contain appropriate versions for a GNAT GPL build;
for an FSF GCC build, you should already have appropriate versions of
the ones marked C via contrib/download_prerequisites):

* [C, G] the GNU Multiprecision library (gmp).

* [C, G] the GNU Multiple Precision Floating Point library (mpfr).

* [C, G] the GNU multiple precision complex number library (mpc).

* the GNU binary utilities (binutils): I've used the version found in
  the ARM Embedded Launchpad 2017q1 release, 2.27.90.20170215.

* the embedded C library newlib: I've used the version found in the
  ARM Embedded Launchpad 2017q1 release (2.5.0, possibly with updates).

* [G] the GNU debugger: the version found in the ARM Embedded
  Launchpad 2017q1 release (7.12.1, possibly with updates) crashed on
  startup; I've used the version provided with GNAT GPL 2016, 7.10
  with updates).

These directions are written for macOS, using the default branch of
the building-arm-eabi Mercurial repository (which is set up for the
latest FSF GCC release), assumed hereafter to be in directory $build.

(1) Unpack all the sources.

(2) In $build, edit common.sh to reflect the locations. If
you are happy to install over your native compiler, adjust PREFIX to
suit (but that may require you to build with root privileges, not
normally a good idea).

(4) Still at the top level of the GCC source directory, and if not
already done, insert symbolic links to the support libraries:

   ln -s /where/ever/gmp-l.m.n gmp
   ln -s /where/ever/mpfr-l.m.n mpfr
   ln -s /where/ever/mpc-l.m.n mpc

(5) Ensure the native compiler is first on your PATH.

(6) Create a build directory, e.g. ~/tmp/build-arm, and subdirectories
binutils/, gcc-boot/, newlib/, gcc/ and gdb/.

(7) In binutils/, call $build/configure-binutils.sh.

(8) in gcc-boot/, call $build/configure-gcc-boot.sh. This builds a C
compiler capable of building newlib.

(9) if using a version of build-arm-eabi earlier than changeset
9dcb1268885e (2016-05-07), set PATH so that the new $prefix/bin
directory comes first, so that the new binutils will be used to build
newlib. If using newer versions, this is done in the scripts.

(10) in newlib/, call $build/configure-newlib.sh.

(11) in gcc/, call $build/configure-gcc.sh (it's best not to do this
in the gcc-boot/ directory, at least if you don't wipe it first).

(12) in gdb/, call $build/configure-gdb.sh.

The new compiler is now installed in $prefix.
